package api.schema
@target(Scala)
@codecTypeField("type")
@codecPackage("api.schema.codec")
@fullCodec("CustomProtocol")

## StringStringMap https://github.com/sbt/contraband/commit/31de6f5b04ac864f53e9aec2d1d282b31d928216
## @todo: ListStringStringMap, ListStringAnyMap, etc

## schema interface
## must be included when implemented
interface Schema {
  domain: api.schema.Domain!
}

## request type
type Request implements Schema {
  domain: api.schema.Domain!
  result: StringStringMap!
}

## response type
type Response implements Schema {
  method: api.schema.Method!
  action: api.schema.Action!
  domain: api.schema.Domain!
  result: StringStringMap!
  timestamp: String!
}

## new simple test type without objects from initial example code
type Greetings{
 sub: String!
 iss: String!
 rel: String!
 iat: String
 reln: String = "csr" @since("3.2.0")
 impId: String = null @since("3.2.0")
## a: String! = "self" @since("3.3.0") ## New required field requires a default value to avoid major breaking change by SemVer
## b: Int @since("3.3.0")             ## New optional field will default to 'None'
## c: String @since("3.3.0")          ## New optional field will default to 'None'


## ##inject some code for @since("3.3.0") to add new toString method

## #x def customToString = s"original fields:  sub=${sub} iss=${iss} rel=${rel} iat=${iat} reln=${reln}"
## #xcompanion def sayHi = s"Hello from the companion object"
## #xtostring  return s"sub=${sub} iss=${iss} rel=${rel} iat=${iat} reln=${reln} impId=${impId} a=${a} b=${b} c=${c}"
}